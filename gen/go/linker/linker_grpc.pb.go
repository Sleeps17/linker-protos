// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.0
// source: linker/linker.proto

package linker_v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinkerClient is the client API for Linker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkerClient interface {
	PostTopic(ctx context.Context, in *PostTopicRequest, opts ...grpc.CallOption) (*PostTopicResponse, error)
	DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*DeleteTopicResponse, error)
	ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error)
	PostLink(ctx context.Context, in *PostLinkRequest, opts ...grpc.CallOption) (*PostLinkResponse, error)
	PickLink(ctx context.Context, in *PickLinkRequest, opts ...grpc.CallOption) (*PickLinkResponse, error)
	DeleteLink(ctx context.Context, in *DeleteLinkRequest, opts ...grpc.CallOption) (*DeleteLinkResponse, error)
	ListLinks(ctx context.Context, in *ListLinksRequest, opts ...grpc.CallOption) (*ListLinksResponse, error)
}

type linkerClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkerClient(cc grpc.ClientConnInterface) LinkerClient {
	return &linkerClient{cc}
}

func (c *linkerClient) PostTopic(ctx context.Context, in *PostTopicRequest, opts ...grpc.CallOption) (*PostTopicResponse, error) {
	out := new(PostTopicResponse)
	err := c.cc.Invoke(ctx, "/linker.Linker/PostTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkerClient) DeleteTopic(ctx context.Context, in *DeleteTopicRequest, opts ...grpc.CallOption) (*DeleteTopicResponse, error) {
	out := new(DeleteTopicResponse)
	err := c.cc.Invoke(ctx, "/linker.Linker/DeleteTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkerClient) ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error) {
	out := new(ListTopicsResponse)
	err := c.cc.Invoke(ctx, "/linker.Linker/ListTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkerClient) PostLink(ctx context.Context, in *PostLinkRequest, opts ...grpc.CallOption) (*PostLinkResponse, error) {
	out := new(PostLinkResponse)
	err := c.cc.Invoke(ctx, "/linker.Linker/PostLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkerClient) PickLink(ctx context.Context, in *PickLinkRequest, opts ...grpc.CallOption) (*PickLinkResponse, error) {
	out := new(PickLinkResponse)
	err := c.cc.Invoke(ctx, "/linker.Linker/PickLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkerClient) DeleteLink(ctx context.Context, in *DeleteLinkRequest, opts ...grpc.CallOption) (*DeleteLinkResponse, error) {
	out := new(DeleteLinkResponse)
	err := c.cc.Invoke(ctx, "/linker.Linker/DeleteLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkerClient) ListLinks(ctx context.Context, in *ListLinksRequest, opts ...grpc.CallOption) (*ListLinksResponse, error) {
	out := new(ListLinksResponse)
	err := c.cc.Invoke(ctx, "/linker.Linker/ListLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkerServer is the server API for Linker service.
// All implementations must embed UnimplementedLinkerServer
// for forward compatibility
type LinkerServer interface {
	PostTopic(context.Context, *PostTopicRequest) (*PostTopicResponse, error)
	DeleteTopic(context.Context, *DeleteTopicRequest) (*DeleteTopicResponse, error)
	ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsResponse, error)
	PostLink(context.Context, *PostLinkRequest) (*PostLinkResponse, error)
	PickLink(context.Context, *PickLinkRequest) (*PickLinkResponse, error)
	DeleteLink(context.Context, *DeleteLinkRequest) (*DeleteLinkResponse, error)
	ListLinks(context.Context, *ListLinksRequest) (*ListLinksResponse, error)
	mustEmbedUnimplementedLinkerServer()
}

// UnimplementedLinkerServer must be embedded to have forward compatible implementations.
type UnimplementedLinkerServer struct {
}

func (UnimplementedLinkerServer) PostTopic(context.Context, *PostTopicRequest) (*PostTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTopic not implemented")
}
func (UnimplementedLinkerServer) DeleteTopic(context.Context, *DeleteTopicRequest) (*DeleteTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopic not implemented")
}
func (UnimplementedLinkerServer) ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopics not implemented")
}
func (UnimplementedLinkerServer) PostLink(context.Context, *PostLinkRequest) (*PostLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLink not implemented")
}
func (UnimplementedLinkerServer) PickLink(context.Context, *PickLinkRequest) (*PickLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickLink not implemented")
}
func (UnimplementedLinkerServer) DeleteLink(context.Context, *DeleteLinkRequest) (*DeleteLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLink not implemented")
}
func (UnimplementedLinkerServer) ListLinks(context.Context, *ListLinksRequest) (*ListLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLinks not implemented")
}
func (UnimplementedLinkerServer) mustEmbedUnimplementedLinkerServer() {}

// UnsafeLinkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkerServer will
// result in compilation errors.
type UnsafeLinkerServer interface {
	mustEmbedUnimplementedLinkerServer()
}

func RegisterLinkerServer(s grpc.ServiceRegistrar, srv LinkerServer) {
	s.RegisterService(&Linker_ServiceDesc, srv)
}

func _Linker_PostTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerServer).PostTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linker.Linker/PostTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerServer).PostTopic(ctx, req.(*PostTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Linker_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linker.Linker/DeleteTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerServer).DeleteTopic(ctx, req.(*DeleteTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Linker_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linker.Linker/ListTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerServer).ListTopics(ctx, req.(*ListTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Linker_PostLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerServer).PostLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linker.Linker/PostLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerServer).PostLink(ctx, req.(*PostLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Linker_PickLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerServer).PickLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linker.Linker/PickLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerServer).PickLink(ctx, req.(*PickLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Linker_DeleteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerServer).DeleteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linker.Linker/DeleteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerServer).DeleteLink(ctx, req.(*DeleteLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Linker_ListLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkerServer).ListLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linker.Linker/ListLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkerServer).ListLinks(ctx, req.(*ListLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Linker_ServiceDesc is the grpc.ServiceDesc for Linker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Linker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "linker.Linker",
	HandlerType: (*LinkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostTopic",
			Handler:    _Linker_PostTopic_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _Linker_DeleteTopic_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _Linker_ListTopics_Handler,
		},
		{
			MethodName: "PostLink",
			Handler:    _Linker_PostLink_Handler,
		},
		{
			MethodName: "PickLink",
			Handler:    _Linker_PickLink_Handler,
		},
		{
			MethodName: "DeleteLink",
			Handler:    _Linker_DeleteLink_Handler,
		},
		{
			MethodName: "ListLinks",
			Handler:    _Linker_ListLinks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "linker/linker.proto",
}
